<?xml version="1.0" encoding="UTF-8"?>
<conﬁguration scan="true" scanPeriod="60 seconds" debug="false">

    <property name="LOGPATH" value="spring-boot-logging/logs"/><!-- 定义日志存放目录 -->
    <property name="PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t-%L] %-5level %logger{36} %L %M - %msg%xEx%n"/><!--日志输出的格式-->
    <contextName>logback</contextName>

    <!--输出到控制台 ConsoleAppender-->
    <appender name="CONSOLE_LOG" class="ch.qos.logback.core.ConsoleAppender">

        <!--展示格式 layout-->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>${PATTERN}</pattern>
        </layout>
        <!--过滤器，只有过滤到指定级别的日志信息才会输出，如果level为ERROR，那么控制台只会输出ERROR日志-->
        <!--
         <ﬁlter class="ch.qos.logback.classic.ﬁlter.ThresholdFilter">
            <level>ERROR</level>
          </ﬁlter>
         -->
    </appender>

    <!--正常的日志文件，输出到文件中-->
    <appender name="DEBUG_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，所以我们使用下面的策略，可以避免输出 Error 的日志-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>Error</level><!--过滤 Error-->
            <onMatch>DENY</onMatch><!--匹配到就禁止-->
            <onMismatch>ACCEPT</onMismatch><!--没有匹配到就允许-->
        </filter>
        <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则如果同时有<File>和<FileNamePattern>，
        那么当天日志是<File>，明天会自动把今天的日志改名为今天的日期。即，<File> 的日志都是当天的。-->
        <File>${LOGPATH}/log_debug.log</File>

        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
            <FileNamePattern>${LOGPATH}/log_debug_%d{yyyy-MM- dd}.log</FileNamePattern>
            <!--只保留最近90天的日志-->
            <maxHistory>90</maxHistory>
            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
            <!--<totalSizeCap>1GB</totalSizeCap>-->
        </rollingPolicy>

        <!--日志输出编码格式化-->
        <encoder>
            <charset>UTF-8</charset>
            <pattern>${PATTERN}</pattern>
        </encoder>
    </appender>

    <!--正常的日志文件，输出到文件中-->
    <appender name="ERROR_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>Error</level><!--过滤 Error-->
            <onMatch>ACCEPT</onMatch><!--匹配到就允许-->
            <onMismatch>DENY</onMismatch><!--没有匹配到就禁止-->
        </filter>
        <File>${LOGPATH}/log_error.log</File>

        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${LOGPATH}/log_error_%d{yyyy-MM- dd}.log</FileNamePattern>
            <maxHistory>90</maxHistory>
        </rollingPolicy>

        <encoder>
            <charset>UTF-8</charset>
            <pattern>${PATTERN}</pattern>
        </encoder>
    </appender>

    <!--指定最基础的日志输出级别-->
    <root level="DEBUG">
        <!--appender将会添加到这个loger-->
        <appender-ref ref="CONSOLE_LOG"/>
        <appender-ref ref="DEBUG_LOG"/>
        <appender-ref ref="ERROR_LOG"/>
    </root>
    <!--定义指定package的日志级别-->
    <logger name="org.springframework" level="INFO"></logger>
    <logger name="org.mybatis" level="INFO"></logger>
    <logger name="java.sql.Connection" level="INFO"></logger>
    <logger name="java.sql.Statement" level="INFO"></logger>
    <logger name="java.sql.PreparedStatement" level="INFO"></logger>
    <logger name="io.lettuce.*" level="INFO"></logger>
    <logger name="io.netty.*" level="ERROR"></logger>
    <logger name="com.rabbitmq.*" level="DEBUG"></logger>
    <logger name="org.springframework.amqp.*" level="DEBUG"></logger>
    <logger name="org.springframework.scheduling.*" level="DEBUG"></logger>
    <!--定义com.xxx..xx..xx包下的日志信息不上传，直接输出到DEBUG_LOG和ﬁleErrorLog这个两个appender中，日志级别为DEBUG
    <logger name="com.xxx.xxx.xx" additivity="false" level="DEBUG">
        <appender-ref ref="DEBUG_LOG"/>
        <appender-ref ref="ERROR_LOG"/>
    </logger>-->
</conﬁguration>